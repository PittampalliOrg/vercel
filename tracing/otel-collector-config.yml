receivers:
  otlp:
    protocols:
      grpc:
        endpoint: otel-collector:4317
      http:
        endpoint: otel-collector:4318
        cors:
          allowed_origins:
            - http://*
            - https://*
  httpcheck/frontend:
    targets:
      - endpoint: http://opentelemetry:3000
  docker_stats:
    endpoint: unix:///var/run/docker.sock
  filelog:
    include_file_path: true
    include:
      - ./logs/*.log
    operators:
      - id: container-parser
        type: container
      - type: trace_parser
        trace_id:
          parse_from: attributes.traceId
        span_id:
          parse_from: attributes.spanId
        trace_flags:
          parse_from: attributes.traceFlags


  # Host metrics
  hostmetrics:
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
        exclude_mount_points:
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/k3s/containerd/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
          match_type: regexp
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true

exporters:
  debug:
    verbosity: detailed
  otlp/jaeger:
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true
  opensearch/traces:
    http:
      endpoint: http://opensearch:9200
      tls:
        insecure: true
    timeout:
    retry_on_failure:
      enabled: true
      initial_interval: 100000000
      randomization_factor: 0.5
    dataset: traces
  opensearch/logs:
    http:
      endpoint: http://opensearch:9200
      tls:
        insecure: true
    timeout:
    retry_on_failure:
      enabled: true
      initial_interval: 100000000
      randomization_factor: 0.5
    dataset: logs
  otlp/traces:
    endpoint: "data-prepper:21890"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlp/metrics:
    endpoint: "data-prepper:21891"
    tls:
      insecure: true
      insecure_skip_verify: true
  otlp/logs:
    endpoint: "data-prepper:21892"
    tls:
      insecure: true
      insecure_skip_verify: true
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    resource_to_telemetry_conversion:
      enabled: true
    timeout: 60s
    tls:
      insecure_skip_verify: true
  otlphttp/traceloop:
    endpoint: "https://api.traceloop.com" 
    headers:
      "Authorization": "Bearer ${env:TRACELOOP_API_KEY}"
  otlphttp/betterstack:
    endpoint: "https://s1202625.eu-nbg-2.betterstackdata.com"
    headers:
      Authorization: "Bearer zYyRMpCtN1ipLRpJQQKDeW16"


processors:
  batch:
  memory_limiter:
    check_interval: 5s
    limit_mib: 4000
    spike_limit_mib: 500

connectors:
  spanmetrics:
    dimensions_cache_size: 1000
    metrics_flush_interval: 15s



service:
  telemetry:
    metrics:
      readers:
        - periodic:
            exporter:
              otlp:
                protocol: grpc/protobuf
                endpoint: http://otel-collector:4317

  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/jaeger, spanmetrics, otlp/traces, otlphttp/traceloop]
    metrics:
      receivers: [httpcheck/frontend, otlp, spanmetrics]
      processors: [batch]
      exporters: [prometheusremotewrite, otlp/metrics]
    logs/betterstack:
      receivers: [filelog] # your logs receivers
      processors: [batch]
      exporters: [otlphttp/betterstack, otlp/logs, debug]
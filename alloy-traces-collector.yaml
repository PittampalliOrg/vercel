# alloy-traces-collector.yaml
---
extensions:
  health_check: {}
  pprof: {}
  zpages: {}

exporters:
  debug:
    verbosity: detailed

  # from pipeline.agent.yml
  otlphttp/traces-collector/mimir:
    endpoint: http://mimir:9009/otlp

  # from pipeline.traces.yml
  otlphttp/tempo:
    endpoint: http://tempo:4318/
  otlphttp/servicegraph/mimir:
    endpoint: http://mimir:9009/otlp

receivers:
  prometheus/traces-collector:
    config:
      scrape_configs:
        - job_name: otelcol-contrib/traces-collector
          scrape_interval: 10s
          static_configs:
            - targets: [0.0.0.0:8888]
  hostmetrics/traces-collector:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.logical.count:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
          system.memory.limit:
            enabled: true
      load:
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_user_error: true
        metrics:
          process.cpu.utilization:
            enabled: true
          process.memory.utilization:
            enabled: true
          process.threads:
            enabled: true
          process.paging.faults:
            enabled: true

  # from pipeline.traces.yml
  otlp/traces-collector:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"

processors:
  # pipeline.agent processors
  batch/traces-collector: {}
  attributes/traces-collector:
    actions:
      - key: service.namespace
        action: upsert
        value: traces-collector
      - key: service.name
        action: upsert
        value: otelcol-contrib/traces-collector
  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]
  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["host.name"], resource.attributes["host.name"])
          - set(attributes["process.command"], resource.attributes["process.command"])
          - set(attributes["process.command_line"], resource.attributes["process.command_line"])
          - set(attributes["process.executable.name"], resource.attributes["process.executable.name"])
          - set(attributes["process.executable.path"], resource.attributes["process.executable.path"])
          - set(attributes["process.owner"], resource.attributes["process.owner"])
          - set(attributes["process.parent_pid"], resource.attributes["process.parent_pid"])
          - set(attributes["process.pid"], resource.attributes["process.pid"])

  # from pipeline.traces.yml
  batch/tempo: {}

  tail_sampling/probabilistic:
    policies:
      - name: probabilistic-policy
        type: probabilistic
        probabilistic:
          sampling_percentage: 100

  tail_sampling/latency-error:
    decision_wait: 10s
    policies:
      # skip traces where latency < 100ms
      - name: latency-policy
        type: latency
        latency:
          threshold_ms: 100

      # only keep error traces, skipping 4XX as false positives
      - name: error-policy
        type: and
        and:
          and_sub_policy:
            - name: status_code-error-policy
              type: status_code
              status_code:
                status_codes: [ERROR]

            - name: http-status-code-error-policy
              type: string_attribute
              string_attribute:
                key: error.type
                values: [4..]
                enabled_regex_matching: true
                invert_match: true

connectors:
  servicegraph:
    dimensions:
      - db.system
      - messaging.system
    virtual_node_peer_attributes:
      - db.name
      - db.system
      - messaging.system
      - peer.service
    virtual_node_extra_label: true

service:
  telemetry:
    metrics:
      level: detailed
    logs:
      level: info
  extensions: [health_check, pprof, zpages]

  pipelines:
    # metrics pipeline
    metrics/traces-collector:
      receivers: [prometheus/traces-collector, hostmetrics/traces-collector]
      processors: [attributes/traces-collector, resourcedetection/system, transform, batch/traces-collector]
      exporters: [otlphttp/traces-collector/mimir]

    # traces pipeline (tail-sampling)
    traces/collector:
      receivers: [otlp/traces-collector]
      processors: [tail_sampling/latency-error, tail_sampling/probabilistic, batch/tempo]
      exporters: [otlphttp/tempo]

    # optional servicegraph pipeline
    traces/servicegraph:
      receivers: [otlp/traces-collector]
      exporters: [servicegraph]

    metrics/servicegraph:
      receivers: [servicegraph]
      exporters: [otlphttp/servicegraph/mimir]

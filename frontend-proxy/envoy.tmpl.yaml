# 'frontend-proxy/envoy.tmpl.yaml'
# Replaces route config with multiple virtual hosts for Next.js apps.

static_resources:
  listeners:
    - name: example_listener_name   # <-- MATCHES layered_runtime setting
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080          # <--- Envoy listens on port 8080 now
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http

                # Internal address config (unchanged)
                internal_address_config:
                  unix_sockets: true
                  cidr_ranges:
                    - address_prefix: 192.168.0.0
                      prefix_len: 16
                    - address_prefix: 10.0.0.0
                      prefix_len: 8

                # Tracing (unchanged)
                tracing:
                  spawn_upstream_span: true
                  provider:
                    name: envoy.tracers.opentelemetry
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                      grpc_service:
                        envoy_grpc:
                          cluster_name: opentelemetry_collector_grpc
                        timeout: 0.250s
                      service_name: ${OTEL_SERVICE_NAME}
                      resource_detectors:
                        - name: envoy.tracers.opentelemetry.resource_detectors.environment
                          typed_config:
                            "@type": type.googleapis.com/envoy.extensions.tracers.opentelemetry.resource_detectors.v3.EnvironmentResourceDetectorConfig

                # **New Route Config** with multiple Virtual Hosts
                route_config:
                  name: local_route
                  virtual_hosts:
                    # 1) Virtual host for 'frontend' Next.js app
                    - name: frontend_vhost
                      # listens on domain 'frontend.localhost'
                      # or any domain you prefer
                      domains:
                        - "frontend.localhost"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: frontend

                    # 2) Virtual host for 'playground' Next.js app
                    - name: playground_vhost
                      domains:
                        - "playground.localhost"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: playground

                    # 3) Virtual host for 'tanstack' Next.js app
                    - name: tanstack_vhost
                      domains:
                        - "tanstack.localhost"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: tanstack

                # The usual HTTP filters (unchanged)
                http_filters:
                  - name: envoy.filters.http.fault
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault
                      max_active_faults: 100
                      delay:
                        header_delay: {}
                        percentage:
                          numerator: 100
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

                # Access logs (unchanged)
                access_log:
                  - name: envoy.access_loggers.open_telemetry
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig"
                      common_config:
                        log_name: "otel_envoy_access_log"
                        grpc_service:
                          envoy_grpc:
                            cluster_name: opentelemetry_collector_grpc
                        transport_api_version: "V3"
                      body:
                        string_value: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% ..."
                      resource_attributes:
                        values:
                          - key: "service.name"
                            value:
                              string_value: ${OTEL_SERVICE_NAME}
                      attributes:
                        values:
                          - key: "destination.address"
                            value:
                              string_value: "%UPSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                          - key: "event.name"
                            value:
                              string_value: "proxy.access"
                          # ... other attribute fields omitted for brevity ...

  clusters:
    - name: opentelemetry_collector_grpc
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: opentelemetry_collector_grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${OTEL_COLLECTOR_HOST}
                      port_value: ${OTEL_COLLECTOR_PORT_GRPC}

    - name: opentelemetry_collector_http
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: opentelemetry_collector_http
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${OTEL_COLLECTOR_HOST}
                      port_value: ${OTEL_COLLECTOR_PORT_HTTP}

    # 1) Cluster for 'frontend' Next.js app
    - name: frontend
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: frontend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: frontend
                      port_value: 3000

    # 2) Cluster for 'playground' Next.js app
    - name: playground
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: playground
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: playground
                      port_value: 3000

    # 3) Cluster for 'tanstack' Next.js app
    - name: tanstack
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: tanstack
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: tanstack
                      port_value: 3000

    # Keep Jaeger/Grafana if needed, or remove if not:
    - name: grafana
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: grafana
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${GRAFANA_HOST}
                      port_value: ${GRAFANA_PORT}

    - name: jaeger
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: jaeger
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${JAEGER_HOST}
                      port_value: ${JAEGER_PORT}

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 10000

layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              example_listener_name:  # <-- MUST match the listener name
                connection_limit: 10000


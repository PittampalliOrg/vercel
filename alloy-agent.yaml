# alloy-agent.yaml
---
extensions:
  health_check: {}
  pprof: {}
  zpages: {}
  file_storage/agent:
    directory: /app/logstate/agent
  file_storage/app:
    directory: /app/logstate/app

exporters:
  debug:
    verbosity: detailed
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    default_labels_enabled:
      level: true
  otlphttp/loki:
    endpoint: http://loki:3100/otlp 
  otlphttp/mimir:
    endpoint: http://mimir:9009/otlp

receivers:
  prometheus/agent:
    config:
      scrape_configs:
        - job_name: otelcol-contrib/agent
          scrape_interval: 10s
          static_configs:
            - targets: [0.0.0.0:8888]
  hostmetrics/agent:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.logical.count:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
          system.memory.limit:
            enabled: true
      load:
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_user_error: true
        metrics:
          process.cpu.utilization:
            enabled: true
          process.memory.utilization:
            enabled: true
          process.threads:
            enabled: true
          process.paging.faults:
            enabled: true

  filelog/agent:
    include: [ /app/otelcol.log.json ]
    storage: file_storage/agent
    attributes:
      service.name: otelcol-contrib/agent
      service.namespace: agent
    operators:
      - type: json_parser
        severity:
          parse_from: attributes.level
        timestamp:
          parse_from: attributes.ts
          layout_type: epoch
          layout: 's.ns'
      - type: remove
        field: body

  filelog/app:
    include: [ /app/log/*.log ]
    storage: file_storage/app
    multiline:
      line_start_pattern: timestamp=
    operators:
      - type: key_value_parser
        delimiter: "="
        pair_delimiter: "\t"
      - type: move
        from: attributes["service.version"]
        to: resource["service.version"]
      - type: move
        from: attributes.message
        to: body
      - type: time_parser
        parse_from: attributes.timestamp
        layout_type: strptime
        layout: "%Y-%m-%dT%H:%M:%S.%LZ" # e.g. 2024-04-11T12:39:13.402Z
      - type: remove
        field: attributes.timestamp
      - type: trace_parser
        trace_id:
          parse_from: attributes.traceId
        span_id:
          parse_from: attributes.spanId
      - type: remove
        field: attributes.traceId
      - type: remove
        field: attributes.spanId
    resource:
      service.name: SERVICE_NAME
      service.namespace: SERVICE_NAMESPACE
      host.name: HOSTNAME
      deployment.environment: DEPLOYMENT_ENVIRONMENT

processors:
  batch/agent: {}
  resource/agent:
    attributes:
      - action: upsert
        key: service.namespace
        value: agent
      - key: service.name
        action: upsert
        value: otelcol-contrib/agent

  attributes/agent:
    actions:
      - key: service.namespace
        action: upsert
        value: agent
      - key: service.name
        action: upsert
        value: otelcol-contrib/agent

  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]

  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["host.name"], resource.attributes["host.name"])
          - set(attributes["process.command"], resource.attributes["process.command"])
          - set(attributes["process.command_line"], resource.attributes["process.command_line"])
          - set(attributes["process.executable.name"], resource.attributes["process.executable.name"])
          - set(attributes["process.executable.path"], resource.attributes["process.executable.path"])
          - set(attributes["process.owner"], resource.attributes["process.owner"])
          - set(attributes["process.parent_pid"], resource.attributes["process.parent_pid"])
          - set(attributes["process.pid"], resource.attributes["process.pid"])

  attributes/agent/loki:
    actions:
      - action: insert
        key: loki.attribute.labels
        # note the labels you want included in Loki queries:
        value: service.name, service.namespace, service.version, deployment.environment, host.name

  # Batch processor for the "app" pipeline
  batch/app: {}

service:
  telemetry:
    metrics:
      level: detailed
    logs:
      level: info
      encoding: json
      output_paths: ["otelcol.log.json"]
  extensions: [health_check, pprof, zpages, file_storage/agent, file_storage/app]

  pipelines:
    # 1) Agent metrics pipeline
    metrics/agent:
      receivers: [prometheus/agent, hostmetrics/agent]
      processors: [attributes/agent, resourcedetection/system, transform, batch/agent]
      exporters: [otlphttp/mimir]

    # 2) Agent logs pipeline
    logs/agent:
      receivers: [filelog/agent]
      processors: [batch/agent, resource/agent, attributes/agent/loki]
      exporters: [loki]

    # 3) Application logs pipeline
    logs/app:
      receivers: [filelog/app]
      processors: [batch/app]
      exporters: [otlphttp/loki, debug]

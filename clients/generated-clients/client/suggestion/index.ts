/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createSuggestionFromDiscriminatorValue, serializeSuggestion, type Suggestion } from '../models/index.js';
// @ts-ignore
import { IdRequestBuilderNavigationMetadata, type IdRequestBuilder } from './id/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SuggestionGetResponse}
 */
// @ts-ignore
export function createSuggestionGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSuggestionGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SuggestionPostResponse}
 */
// @ts-ignore
export function createSuggestionPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSuggestionPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSuggestionGetResponse(suggestionGetResponse: Partial<SuggestionGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nextLink": n => { suggestionGetResponse.nextLink = n.getStringValue(); },
        "value": n => { suggestionGetResponse.value = n.getCollectionOfObjectValues<Suggestion>(createSuggestionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSuggestionPostResponse(suggestionPostResponse: Partial<SuggestionPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { suggestionPostResponse.value = n.getCollectionOfObjectValues<Suggestion>(createSuggestionFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSuggestionGetResponse(writer: SerializationWriter, suggestionGetResponse: Partial<SuggestionGetResponse> | undefined | null = {}) : void {
    if (suggestionGetResponse) {
        writer.writeStringValue("nextLink", suggestionGetResponse.nextLink);
        writer.writeCollectionOfObjectValues<Suggestion>("value", suggestionGetResponse.value, serializeSuggestion);
        writer.writeAdditionalData(suggestionGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSuggestionPostResponse(writer: SerializationWriter, suggestionPostResponse: Partial<SuggestionPostResponse> | undefined | null = {}) : void {
    if (suggestionPostResponse) {
        writer.writeCollectionOfObjectValues<Suggestion>("value", suggestionPostResponse.value, serializeSuggestion);
        writer.writeAdditionalData(suggestionPostResponse.additionalData);
    }
}
export interface SuggestionGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The nextLink property
     */
    nextLink?: string | null;
    /**
     * The value property
     */
    value?: Suggestion[] | null;
}
export interface SuggestionPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: Suggestion[] | null;
}
/**
 * Builds and executes requests for operations under /Suggestion
 */
export interface SuggestionRequestBuilder extends BaseRequestBuilder<SuggestionRequestBuilder> {
    /**
     * The id property
     */
    get id(): IdRequestBuilder;
    /**
     * Returns entities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SuggestionGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<SuggestionRequestBuilderGetQueryParameters> | undefined) : Promise<SuggestionGetResponse | undefined>;
    /**
     * Create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SuggestionPostResponse>}
     */
     post(body: Suggestion, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SuggestionPostResponse | undefined>;
    /**
     * Returns entities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SuggestionRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Suggestion, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Returns entities.
 */
export interface SuggestionRequestBuilderGetQueryParameters {
    /**
     * An opaque string that specifies the cursor position after which results should be returned.
     */
    after?: string;
    /**
     * An OData expression (an expression that returns a boolean value) using the entity's fields to retrieve a subset of the results.
     */
    filter?: string;
    /**
     * An integer value that specifies the number of items to return. Default is 100.
     */
    first?: number;
    /**
     * Uses a comma-separated list of expressions to sort response items. Add 'desc' for descending order, otherwise it's ascending by default.
     */
    orderby?: string;
    /**
     * A comma separated list of fields to return in the response.
     */
    select?: string;
}
/**
 * Uri template for the request builder.
 */
export const SuggestionRequestBuilderUriTemplate = "{+baseurl}/Suggestion{?%24after*,%24filter*,%24first*,%24orderby*,%24select*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SuggestionRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "after": "%24after",
    "filter": "%24filter",
    "first": "%24first",
    "orderby": "%24orderby",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SuggestionRequestBuilderNavigationMetadata: Record<Exclude<keyof SuggestionRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    id: {
        navigationMetadata: IdRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SuggestionRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SuggestionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createSuggestionGetResponseFromDiscriminatorValue,
        queryParametersMapper: SuggestionRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SuggestionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createSuggestionPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSuggestion,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

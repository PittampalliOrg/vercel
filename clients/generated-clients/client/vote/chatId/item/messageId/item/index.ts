/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createVoteFromDiscriminatorValue, serializeVote, serializeVote_NoPK, type Vote, type Vote_NoPK } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithMessageGetResponse}
 */
// @ts-ignore
export function createWithMessageGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithMessageGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithMessagePatchResponse}
 */
// @ts-ignore
export function createWithMessagePatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithMessagePatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithMessagePutResponse}
 */
// @ts-ignore
export function createWithMessagePutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithMessagePutResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithMessageGetResponse(withMessageGetResponse: Partial<WithMessageGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { withMessageGetResponse.value = n.getCollectionOfObjectValues<Vote>(createVoteFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithMessagePatchResponse(withMessagePatchResponse: Partial<WithMessagePatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { withMessagePatchResponse.value = n.getCollectionOfObjectValues<Vote>(createVoteFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithMessagePutResponse(withMessagePutResponse: Partial<WithMessagePutResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { withMessagePutResponse.value = n.getCollectionOfObjectValues<Vote>(createVoteFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithMessageGetResponse(writer: SerializationWriter, withMessageGetResponse: Partial<WithMessageGetResponse> | undefined | null = {}) : void {
    if (withMessageGetResponse) {
        writer.writeCollectionOfObjectValues<Vote>("value", withMessageGetResponse.value, serializeVote);
        writer.writeAdditionalData(withMessageGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithMessagePatchResponse(writer: SerializationWriter, withMessagePatchResponse: Partial<WithMessagePatchResponse> | undefined | null = {}) : void {
    if (withMessagePatchResponse) {
        writer.writeCollectionOfObjectValues<Vote>("value", withMessagePatchResponse.value, serializeVote);
        writer.writeAdditionalData(withMessagePatchResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithMessagePutResponse(writer: SerializationWriter, withMessagePutResponse: Partial<WithMessagePutResponse> | undefined | null = {}) : void {
    if (withMessagePutResponse) {
        writer.writeCollectionOfObjectValues<Vote>("value", withMessagePutResponse.value, serializeVote);
        writer.writeAdditionalData(withMessagePutResponse.additionalData);
    }
}
export interface WithMessageGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: Vote[] | null;
}
/**
 * Builds and executes requests for operations under /Vote/chatId/{chatId}/messageId/{messageId}
 */
export interface WithMessageItemRequestBuilder extends BaseRequestBuilder<WithMessageItemRequestBuilder> {
    /**
     * Delete entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Returns an entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithMessageGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<WithMessageItemRequestBuilderGetQueryParameters> | undefined) : Promise<WithMessageGetResponse | undefined>;
    /**
     * Update or create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithMessagePatchResponse>}
     */
     patch(body: Vote_NoPK, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithMessagePatchResponse | undefined>;
    /**
     * Replace or create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithMessagePutResponse>}
     */
     put(body: Vote_NoPK, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithMessagePutResponse | undefined>;
    /**
     * Delete entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Returns an entity.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithMessageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update or create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Vote_NoPK, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Replace or create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Vote_NoPK, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Returns an entity.
 */
export interface WithMessageItemRequestBuilderGetQueryParameters {
    /**
     * An opaque string that specifies the cursor position after which results should be returned.
     */
    after?: string;
    /**
     * An OData expression (an expression that returns a boolean value) using the entity's fields to retrieve a subset of the results.
     */
    filter?: string;
    /**
     * An integer value that specifies the number of items to return. Default is 100.
     */
    first?: number;
    /**
     * Uses a comma-separated list of expressions to sort response items. Add 'desc' for descending order, otherwise it's ascending by default.
     */
    orderby?: string;
    /**
     * A comma separated list of fields to return in the response.
     */
    select?: string;
}
export interface WithMessagePatchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: Vote[] | null;
}
export interface WithMessagePutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: Vote[] | null;
}
/**
 * Uri template for the request builder.
 */
export const WithMessageItemRequestBuilderUriTemplate = "{+baseurl}/Vote/chatId/{chatId}/messageId/{messageId}{?%24after*,%24filter*,%24first*,%24orderby*,%24select*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WithMessageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "after": "%24after",
    "filter": "%24filter",
    "first": "%24first",
    "orderby": "%24orderby",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithMessageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithMessageItemRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithMessageGetResponseFromDiscriminatorValue,
        queryParametersMapper: WithMessageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: WithMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithMessagePatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVote_NoPK,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: WithMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithMessagePutResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVote_NoPK,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */

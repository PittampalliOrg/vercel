/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Chat extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
    /**
     * The visibility property
     */
    visibility?: string | null;
}
export interface Chat_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
    /**
     * The visibility property
     */
    visibility?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Chat_NoPK}
 */
// @ts-ignore
export function createChat_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChat_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Chat}
 */
// @ts-ignore
export function createChatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Document_NoPK}
 */
// @ts-ignore
export function createDocument_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDocument_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Document}
 */
// @ts-ignore
export function createDocumentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDocument;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message_NoPK}
 */
// @ts-ignore
export function createMessage_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessage_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Message}
 */
// @ts-ignore
export function createMessageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Suggestion_NoPK}
 */
// @ts-ignore
export function createSuggestion_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSuggestion_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Suggestion}
 */
// @ts-ignore
export function createSuggestionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSuggestion;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User_NoPK}
 */
// @ts-ignore
export function createUser_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User}
 */
// @ts-ignore
export function createUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vote_NoPK}
 */
// @ts-ignore
export function createVote_NoPKFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVote_NoPK;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Vote}
 */
// @ts-ignore
export function createVoteFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVote;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChat(chat: Partial<Chat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { chat.createdAt = n.getStringValue(); },
        "id": n => { chat.id = n.getStringValue(); },
        "title": n => { chat.title = n.getStringValue(); },
        "userId": n => { chat.userId = n.getStringValue(); },
        "visibility": n => { chat.visibility = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChat_NoPK(chat_NoPK: Partial<Chat_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { chat_NoPK.createdAt = n.getStringValue(); },
        "title": n => { chat_NoPK.title = n.getStringValue(); },
        "userId": n => { chat_NoPK.userId = n.getStringValue(); },
        "visibility": n => { chat_NoPK.visibility = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDocument(document: Partial<Document> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { document.content = n.getStringValue(); },
        "createdAt": n => { document.createdAt = n.getStringValue(); },
        "id": n => { document.id = n.getStringValue(); },
        "text": n => { document.text = n.getStringValue(); },
        "title": n => { document.title = n.getStringValue(); },
        "userId": n => { document.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDocument_NoPK(document_NoPK: Partial<Document_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { document_NoPK.content = n.getStringValue(); },
        "text": n => { document_NoPK.text = n.getStringValue(); },
        "title": n => { document_NoPK.title = n.getStringValue(); },
        "userId": n => { document_NoPK.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage(message: Partial<Message> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chatId": n => { message.chatId = n.getStringValue(); },
        "content": n => { message.content = n.getStringValue(); },
        "createdAt": n => { message.createdAt = n.getStringValue(); },
        "id": n => { message.id = n.getStringValue(); },
        "role": n => { message.role = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessage_NoPK(message_NoPK: Partial<Message_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chatId": n => { message_NoPK.chatId = n.getStringValue(); },
        "content": n => { message_NoPK.content = n.getStringValue(); },
        "createdAt": n => { message_NoPK.createdAt = n.getStringValue(); },
        "role": n => { message_NoPK.role = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSuggestion(suggestion: Partial<Suggestion> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { suggestion.createdAt = n.getStringValue(); },
        "description": n => { suggestion.description = n.getStringValue(); },
        "documentCreatedAt": n => { suggestion.documentCreatedAt = n.getStringValue(); },
        "documentId": n => { suggestion.documentId = n.getStringValue(); },
        "id": n => { suggestion.id = n.getStringValue(); },
        "isResolved": n => { suggestion.isResolved = n.getBooleanValue(); },
        "originalText": n => { suggestion.originalText = n.getStringValue(); },
        "suggestedText": n => { suggestion.suggestedText = n.getStringValue(); },
        "userId": n => { suggestion.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSuggestion_NoPK(suggestion_NoPK: Partial<Suggestion_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAt": n => { suggestion_NoPK.createdAt = n.getStringValue(); },
        "description": n => { suggestion_NoPK.description = n.getStringValue(); },
        "documentCreatedAt": n => { suggestion_NoPK.documentCreatedAt = n.getStringValue(); },
        "documentId": n => { suggestion_NoPK.documentId = n.getStringValue(); },
        "isResolved": n => { suggestion_NoPK.isResolved = n.getBooleanValue(); },
        "originalText": n => { suggestion_NoPK.originalText = n.getStringValue(); },
        "suggestedText": n => { suggestion_NoPK.suggestedText = n.getStringValue(); },
        "userId": n => { suggestion_NoPK.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUser(user: Partial<User> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { user.email = n.getStringValue(); },
        "id": n => { user.id = n.getStringValue(); },
        "password": n => { user.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUser_NoPK(user_NoPK: Partial<User_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { user_NoPK.email = n.getStringValue(); },
        "password": n => { user_NoPK.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVote(vote: Partial<Vote> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "chatId": n => { vote.chatId = n.getStringValue(); },
        "isUpvoted": n => { vote.isUpvoted = n.getBooleanValue(); },
        "messageId": n => { vote.messageId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVote_NoPK(vote_NoPK: Partial<Vote_NoPK> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "isUpvoted": n => { vote_NoPK.isUpvoted = n.getBooleanValue(); },
    }
}
export interface Document extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The text property
     */
    text?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
export interface Document_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The text property
     */
    text?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
export interface Message extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatId property
     */
    chatId?: string | null;
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The role property
     */
    role?: string | null;
}
export interface Message_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatId property
     */
    chatId?: string | null;
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The role property
     */
    role?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChat(writer: SerializationWriter, chat: Partial<Chat> | undefined | null = {}) : void {
    if (chat) {
        writer.writeStringValue("createdAt", chat.createdAt);
        writer.writeStringValue("id", chat.id);
        writer.writeStringValue("title", chat.title);
        writer.writeStringValue("userId", chat.userId);
        writer.writeStringValue("visibility", chat.visibility);
        writer.writeAdditionalData(chat.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChat_NoPK(writer: SerializationWriter, chat_NoPK: Partial<Chat_NoPK> | undefined | null = {}) : void {
    if (chat_NoPK) {
        writer.writeStringValue("createdAt", chat_NoPK.createdAt);
        writer.writeStringValue("title", chat_NoPK.title);
        writer.writeStringValue("userId", chat_NoPK.userId);
        writer.writeStringValue("visibility", chat_NoPK.visibility);
        writer.writeAdditionalData(chat_NoPK.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDocument(writer: SerializationWriter, document: Partial<Document> | undefined | null = {}) : void {
    if (document) {
        writer.writeStringValue("content", document.content);
        writer.writeStringValue("createdAt", document.createdAt);
        writer.writeStringValue("id", document.id);
        writer.writeStringValue("text", document.text);
        writer.writeStringValue("title", document.title);
        writer.writeStringValue("userId", document.userId);
        writer.writeAdditionalData(document.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDocument_NoPK(writer: SerializationWriter, document_NoPK: Partial<Document_NoPK> | undefined | null = {}) : void {
    if (document_NoPK) {
        writer.writeStringValue("content", document_NoPK.content);
        writer.writeStringValue("text", document_NoPK.text);
        writer.writeStringValue("title", document_NoPK.title);
        writer.writeStringValue("userId", document_NoPK.userId);
        writer.writeAdditionalData(document_NoPK.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage(writer: SerializationWriter, message: Partial<Message> | undefined | null = {}) : void {
    if (message) {
        writer.writeStringValue("chatId", message.chatId);
        writer.writeStringValue("content", message.content);
        writer.writeStringValue("createdAt", message.createdAt);
        writer.writeStringValue("id", message.id);
        writer.writeStringValue("role", message.role);
        writer.writeAdditionalData(message.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessage_NoPK(writer: SerializationWriter, message_NoPK: Partial<Message_NoPK> | undefined | null = {}) : void {
    if (message_NoPK) {
        writer.writeStringValue("chatId", message_NoPK.chatId);
        writer.writeStringValue("content", message_NoPK.content);
        writer.writeStringValue("createdAt", message_NoPK.createdAt);
        writer.writeStringValue("role", message_NoPK.role);
        writer.writeAdditionalData(message_NoPK.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSuggestion(writer: SerializationWriter, suggestion: Partial<Suggestion> | undefined | null = {}) : void {
    if (suggestion) {
        writer.writeStringValue("createdAt", suggestion.createdAt);
        writer.writeStringValue("description", suggestion.description);
        writer.writeStringValue("documentCreatedAt", suggestion.documentCreatedAt);
        writer.writeStringValue("documentId", suggestion.documentId);
        writer.writeStringValue("id", suggestion.id);
        writer.writeBooleanValue("isResolved", suggestion.isResolved);
        writer.writeStringValue("originalText", suggestion.originalText);
        writer.writeStringValue("suggestedText", suggestion.suggestedText);
        writer.writeStringValue("userId", suggestion.userId);
        writer.writeAdditionalData(suggestion.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSuggestion_NoPK(writer: SerializationWriter, suggestion_NoPK: Partial<Suggestion_NoPK> | undefined | null = {}) : void {
    if (suggestion_NoPK) {
        writer.writeStringValue("createdAt", suggestion_NoPK.createdAt);
        writer.writeStringValue("description", suggestion_NoPK.description);
        writer.writeStringValue("documentCreatedAt", suggestion_NoPK.documentCreatedAt);
        writer.writeStringValue("documentId", suggestion_NoPK.documentId);
        writer.writeBooleanValue("isResolved", suggestion_NoPK.isResolved);
        writer.writeStringValue("originalText", suggestion_NoPK.originalText);
        writer.writeStringValue("suggestedText", suggestion_NoPK.suggestedText);
        writer.writeStringValue("userId", suggestion_NoPK.userId);
        writer.writeAdditionalData(suggestion_NoPK.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUser(writer: SerializationWriter, user: Partial<User> | undefined | null = {}) : void {
    if (user) {
        writer.writeStringValue("email", user.email);
        writer.writeStringValue("id", user.id);
        writer.writeStringValue("password", user.password);
        writer.writeAdditionalData(user.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUser_NoPK(writer: SerializationWriter, user_NoPK: Partial<User_NoPK> | undefined | null = {}) : void {
    if (user_NoPK) {
        writer.writeStringValue("email", user_NoPK.email);
        writer.writeStringValue("password", user_NoPK.password);
        writer.writeAdditionalData(user_NoPK.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVote(writer: SerializationWriter, vote: Partial<Vote> | undefined | null = {}) : void {
    if (vote) {
        writer.writeStringValue("chatId", vote.chatId);
        writer.writeBooleanValue("isUpvoted", vote.isUpvoted);
        writer.writeStringValue("messageId", vote.messageId);
        writer.writeAdditionalData(vote.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVote_NoPK(writer: SerializationWriter, vote_NoPK: Partial<Vote_NoPK> | undefined | null = {}) : void {
    if (vote_NoPK) {
        writer.writeBooleanValue("isUpvoted", vote_NoPK.isUpvoted);
        writer.writeAdditionalData(vote_NoPK.additionalData);
    }
}
export interface Suggestion extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The documentCreatedAt property
     */
    documentCreatedAt?: string | null;
    /**
     * The documentId property
     */
    documentId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The isResolved property
     */
    isResolved?: boolean | null;
    /**
     * The originalText property
     */
    originalText?: string | null;
    /**
     * The suggestedText property
     */
    suggestedText?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
export interface Suggestion_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAt property
     */
    createdAt?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The documentCreatedAt property
     */
    documentCreatedAt?: string | null;
    /**
     * The documentId property
     */
    documentId?: string | null;
    /**
     * The isResolved property
     */
    isResolved?: boolean | null;
    /**
     * The originalText property
     */
    originalText?: string | null;
    /**
     * The suggestedText property
     */
    suggestedText?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
export interface User extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface User_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface Vote extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatId property
     */
    chatId?: string | null;
    /**
     * The isUpvoted property
     */
    isUpvoted?: boolean | null;
    /**
     * The messageId property
     */
    messageId?: string | null;
}
export interface Vote_NoPK extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The isUpvoted property
     */
    isUpvoted?: boolean | null;
}
/* tslint:enable */
/* eslint-enable */

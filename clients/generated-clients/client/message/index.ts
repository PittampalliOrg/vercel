/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMessageFromDiscriminatorValue, serializeMessage, type Message } from '../models/index.js';
// @ts-ignore
import { IdRequestBuilderNavigationMetadata, type IdRequestBuilder } from './id/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessageGetResponse}
 */
// @ts-ignore
export function createMessageGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessageGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MessagePostResponse}
 */
// @ts-ignore
export function createMessagePostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMessagePostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessageGetResponse(messageGetResponse: Partial<MessageGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "nextLink": n => { messageGetResponse.nextLink = n.getStringValue(); },
        "value": n => { messageGetResponse.value = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMessagePostResponse(messagePostResponse: Partial<MessagePostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { messagePostResponse.value = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
    }
}
export interface MessageGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The nextLink property
     */
    nextLink?: string | null;
    /**
     * The value property
     */
    value?: Message[] | null;
}
export interface MessagePostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: Message[] | null;
}
/**
 * Builds and executes requests for operations under /Message
 */
export interface MessageRequestBuilder extends BaseRequestBuilder<MessageRequestBuilder> {
    /**
     * The id property
     */
    get id(): IdRequestBuilder;
    /**
     * Returns entities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MessageGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<MessageRequestBuilderGetQueryParameters> | undefined) : Promise<MessageGetResponse | undefined>;
    /**
     * Create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MessagePostResponse>}
     */
     post(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MessagePostResponse | undefined>;
    /**
     * Returns entities.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MessageRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create entity.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Returns entities.
 */
export interface MessageRequestBuilderGetQueryParameters {
    /**
     * An opaque string that specifies the cursor position after which results should be returned.
     */
    after?: string;
    /**
     * An OData expression (an expression that returns a boolean value) using the entity's fields to retrieve a subset of the results.
     */
    filter?: string;
    /**
     * An integer value that specifies the number of items to return. Default is 100.
     */
    first?: number;
    /**
     * Uses a comma-separated list of expressions to sort response items. Add 'desc' for descending order, otherwise it's ascending by default.
     */
    orderby?: string;
    /**
     * A comma separated list of fields to return in the response.
     */
    select?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessageGetResponse(writer: SerializationWriter, messageGetResponse: Partial<MessageGetResponse> | undefined | null = {}) : void {
    if (messageGetResponse) {
        writer.writeStringValue("nextLink", messageGetResponse.nextLink);
        writer.writeCollectionOfObjectValues<Message>("value", messageGetResponse.value, serializeMessage);
        writer.writeAdditionalData(messageGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMessagePostResponse(writer: SerializationWriter, messagePostResponse: Partial<MessagePostResponse> | undefined | null = {}) : void {
    if (messagePostResponse) {
        writer.writeCollectionOfObjectValues<Message>("value", messagePostResponse.value, serializeMessage);
        writer.writeAdditionalData(messagePostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const MessageRequestBuilderUriTemplate = "{+baseurl}/Message{?%24after*,%24filter*,%24first*,%24orderby*,%24select*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MessageRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "after": "%24after",
    "filter": "%24filter",
    "first": "%24first",
    "orderby": "%24orderby",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MessageRequestBuilderNavigationMetadata: Record<Exclude<keyof MessageRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    id: {
        navigationMetadata: IdRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MessageRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MessageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createMessageGetResponseFromDiscriminatorValue,
        queryParametersMapper: MessageRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: MessageRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createMessagePostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */


networks:
  shared-network:
    name: shared-network
volumes:
  postgres-data:

services:
  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
    networks:
      - shared-network

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200" # tempo
      - "4319:4317" # otlp grpc
    depends_on:
      - init
    networks:
      - shared-network

  traefik:
    image: "traefik:v3.3"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entryPoints.web.address=:80"
      - "--tracing.otlp.http=true"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
      - "--experimental.otlpLogs=true"
      - "--log.otlp.http.endpoint=http://otel-collector:4318/v1/logs"
      - "--accesslog.fields.names.StartUTC=drop"
      - "--metrics.otlp.http.endpoint=http://otel-collector:4318/v1/metrics"
    ports:
      - "80:80"
      - "8080:8080"
    environment:
      - TZ=America/New_York
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - shared-network


  frontend:
    container_name: frontend
    image: next-js
    volumes:
      - .:/workspace:cached
      - ./.next:/app/.next
      - ./public:/app/public
    environment:
      # If you still rely on a /frontend prefix in your code, keep it:
      - NEXT_PUBLIC_BASE_PATH=/frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    command: sleep infinity  # For dev usage; Next.js won't auto-run
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=(Host(`localhost`) && PathPrefix(`/frontend`))"
      # - "traefik.http.routers.frontend-api.rule=(Host(`app.localhost`) && PathPrefix(`/api/chat`))"
      # - "traefik.http.routers.frontend-api.service=frontend"
      # - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - traefik
    networks:
      - shared-network


  # And put them in an OTEL collector pipeline...
  otel-collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml
    depends_on:
      - tempo
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./config/shared/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - shared-network

  grafana:
    image: grafana/grafana:11.0.0
    volumes:
      - ./config/shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000"
    networks:
      - shared-network

  db:
    container_name: db
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - shared-network

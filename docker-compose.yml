# docker-compose.yml
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  shared-network:
    name: shared-network

volumes:
  postgres-data:

# include:
#    - path: ../grafana-plugin/pittampalli-otel-app/docker-compose.yaml
#      project_directory: ../grafana-plugin/pittampalli-otel-app
    #  env_file: ../another/.env

services:

  ########################################
  # 1) Envoy front-proxy
  ########################################

  traefik:
    image: "traefik:v3.3"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entryPoints.web.address=:80"
      - "--tracing.otlp.http=true"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
      - "--experimental.otlpLogs=true"
      - "--log.otlp.http.endpoint=http://otel-collector:4318/v1/logs"
      - "--accesslog.fields.names.StartUTC=drop"
      - "--metrics.otlp.http.endpoint=http://otel-collector:4318/v1/metrics"
    ports:
      - "80:80"
      - "8080:8080"
    environment:
      - TZ=America/New_York
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - shared-network

  app:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=(Host(`localhost`) && PathPrefix(`/app`))"
    networks:
      - shared-network

  ########################################
  # 2) Next.js "frontend"
  ########################################
  frontend:
    container_name: frontend
    image: next-js
    volumes:
      - .:/workspace:cached
      - ./.next:/app/.next
      - ./public:/app/public
    environment:
      # If you still rely on a /frontend prefix in your code, keep it:
      - NEXT_PUBLIC_BASE_PATH=/frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    command: sleep infinity  # For dev usage; Next.js won't auto-run
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=(Host(`localhost`) && PathPrefix(`/frontend`))"
      # - "traefik.http.routers.frontend-api.rule=(Host(`app.localhost`) && PathPrefix(`/api/chat`))"
      # - "traefik.http.routers.frontend-api.service=frontend"
      # - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - traefik
    networks:
      - shared-network

  db:
    container_name: db
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/lib/db/migrations:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - shared-network

  # rest:
  #   container_name: rest
  #   image: postgrest/postgrest
  #   ports:
  #     - "3011:3000"
  #   restart: unless-stopped
  #   depends_on:
  #     - db
  #   environment:
  #     PGRST_DB_URI: postgres://postgres:${POSTGRESQL_PASSWORD}@${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRESQL_DB}
  #     PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3011
  #     PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
  #     PGRST_DB_ANON_ROLE: anon
  #     PGRST_JWT_SECRET: ${JWT_SECRET}
  #     PGRST_DB_USE_LEGACY_GUCS: "false"
  #     PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
  #     PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
  #   command:
  #     [
  #       "postgrest"
  #     ]
  #   networks:
  #     - shared-network

  # swagger:
  #   image: swaggerapi/swagger-ui
  #   ports:
  #     - "8081:8080"
  #   expose:
  #     - "8081"
  #   environment:
  #     API_URL: http://localhost:3011/
  #   networks:
  #     - shared-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: username
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: password
    volumes:
      - ./config/clickhouse/example/default_ddl:/docker-entrypoint-initdb.d/
    networks:
      - shared-network

  # grizzly:
  #   image: grafana/grizzly:latest
  #   environment:
  #   - GRAFANA_URL=${GRAFANA_URL}
  #   - GRAFANA_TOKEN=${GRAFANA_TOKEN}
  #   volumes :
  #   - ./config/grafana:/src/grafana
  #   - ../grafana-plugin/pittampalli-otel-app/src/dashboards:/src/dashboards
  #   command: watch /src /src/dashboards/output.json
  #   depends_on:
  #     - grafana
  #   networks:
  #     - shared-network
  jaeger:
    image: "${JAEGERTRACING_IMAGE}"  # Or "jaegertracing/all-in-one:1.43.0"
    container_name: "jaeger"
    # In all-in-one, the same process runs query + collector + OTLP
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://mimir:9009"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      # Publish the OTLP/gRPC port so the collector can talk from outside or inside
      - "4317"
      # Publish the UI so you can access it in the browser or Traefik
      - "16686:16686"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    labels:
      - "traefik.enable=true"

      # Route the Jaeger UI through Traefik at /jaeger -> 16686
      - "traefik.http.routers.jaeger.rule=(Host(`localhost`) && PathPrefix(`/jaeger`))"
      - "traefik.http.routers.jaeger.service=jaeger-ui"
      - "traefik.http.services.jaeger-ui.loadbalancer.server.port=16686"

    networks:
      - shared-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:${OTEL_CONTRIB_COL}
    command: "--config /etc/otelcol-contrib/exporters.yml --config /etc/otelcol-contrib/extensions.yml --config /etc/otelcol-contrib/receivers.yml --config /etc/otelcol-contrib/pipeline.agent.yml --config /etc/otelcol-contrib/pipeline.logs.yml --config /etc/otelcol-contrib/pipeline.traces.yml"
    volumes:
      - ./config/otelcontribcol/gateway/:/etc/otelcol-contrib/:ro
    networks:
      - shared-network
    depends_on:
      - mimir
      - loki
      - otelcontribcol-traces-loadbalancer
    ports:
      - "4318:4318" 
      - "4317:4317" 
    # extra_hosts:
    #   - 'host.docker.internal:host-gateway'

  otelcontribcol-traces-loadbalancer:
    image: otel/opentelemetry-collector-contrib:${OTEL_CONTRIB_COL}
    command: "--config /etc/otelcol-contrib/exporters.yml --config /etc/otelcol-contrib/extensions.yml --config /etc/otelcol-contrib/pipeline.agent.yml --config /etc/otelcol-contrib/pipeline.traces.yml"
    volumes:
      - ./config/otelcontribcol/traces-loadbalancer/:/etc/otelcol-contrib/:ro
    networks:
      - shared-network
    depends_on:
      - mimir
      - otelcontribcol-traces-collector
  otelcontribcol-traces-collector:
    image: otel/opentelemetry-collector-contrib:${OTEL_CONTRIB_COL}
    command: "--config /etc/otelcol-contrib/exporters.yml --config /etc/otelcol-contrib/extensions.yml --config /etc/otelcol-contrib/pipeline.agent.yml --config /etc/otelcol-contrib/pipeline.traces.yml"
    volumes:
      - ./config/otelcontribcol/traces-collector/:/etc/otelcol-contrib/:ro
    networks:
      - shared-network
    depends_on:
      - mimir
      - tempo
    deploy:
      replicas: 2


  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/local-config.yaml -validation.reject-old-samples=false -query-scheduler.max-outstanding-requests-per-tenant=2048 -querier.max-outstanding-requests-per-tenant=2048
    volumes:
      - ./config/loki/:/etc/loki/:ro
    networks:
      - shared-network

  mimir:
    image: grafana/mimir:2.11.0
    volumes:
      - ./config/mimir/mimir.yaml:/etc/mimir.yaml
    command: --config.file=/etc/mimir.yaml -distributor.otel-metric-suffixes-enabled # otel_metric_suffixes_enabled: https://grafana.com/docs/enterprise-metrics/latest/config/reference/#limits
    networks:
      - shared-network

  tempo:
    image: grafana/tempo:2.3.1
    volumes:
      - ./config/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
    command: [ "-config.file=/etc/tempo.yaml" ]
    networks:
      - shared-network

  grafana:
    image: grafana/grafana-oss:10.4.1
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    expose:
      - "3000"
    networks:
      - shared-network
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=(Host(`localhost`) && PathPrefix(`/grafana`))"
    depends_on:
      - mimir
      - loki
      - tempo

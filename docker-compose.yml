# docker-compose.yml
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  default:
    name: opentelemetry
    driver: bridge
    external: true
    attachable: true

volumes:
  postgres-data:
  opensearch-data:
  prometheus_data:

services:

  ########################################
  # 1) Envoy front-proxy
  ########################################

  traefik:
    image: "traefik:v3.3"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entryPoints.web.address=:80"
      - "--tracing.otlp.http=true"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
      - "--experimental.otlpLogs=true"
      - "--log.otlp.http.endpoint=http://otel-collector:4318/v1/logs"
      - "--accesslog.fields.names.StartUTC=drop"
      - "--metrics.otlp.http.endpoint=http://otel-collector:4318/v1/metrics"
    ports:
      - "80:80"
      - "8080:8080"
    environment:
      - TZ=America/New_York
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  app:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=(Host(`localhost`) && PathPrefix(`/app`))"

  # frontend-proxy:
  #   image: ${IMAGE_NAME}:${DEMO_VERSION}-frontend-proxy
  #   container_name: frontend-proxy
  #   build:
  #     context: ./frontend-proxy
  #     dockerfile: Dockerfile
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 65M
  #   restart: unless-stopped

  #   # *** Revised to listen on 8080 externally â†’ 8080 in container
  #   ports:
  #     - "8080:8080"
  #     - "10000:10000"  # Admin port
  #   environment:
  #     # You can still set these if they're used in envoy.tmpl.yaml, but usually set ENVOY_PORT=8080
  #     - ENVOY_PORT=8080
  #     # Keep or remove any other env vars if needed:
  #     - FRONTEND_PORT
  #     - FRONTEND_HOST
  #     - LOCUST_WEB_HOST
  #     - LOCUST_WEB_PORT
  #     - GRAFANA_PORT
  #     - GRAFANA_HOST
  #     - JAEGER_PORT
  #     - JAEGER_HOST
  #     - OTEL_COLLECTOR_HOST
  #     - IMAGE_PROVIDER_HOST
  #     - IMAGE_PROVIDER_PORT
  #     - OTEL_COLLECTOR_PORT_GRPC
  #     - OTEL_COLLECTOR_PORT_HTTP
  #     - OTEL_RESOURCE_ATTRIBUTES
  #     - OTEL_SERVICE_NAME=frontend-proxy
  #     - FLAGD_HOST
  #     - FLAGD_PORT
  #     - FLAGD_UI_HOST
  #     - FLAGD_UI_PORT

    # # *** Ensure Envoy waits for the Next.js services:
    # depends_on:
    #   frontend:
    #     condition: service_started
    #   tanstack:
    #     condition: service_started
    #   # If you re-enable playground, you can add:
    #   # playground:
    #   #   condition: service_started

    # dns_search: ""

  ########################################
  # 2) Next.js "frontend"
  ########################################
  frontend:
    container_name: frontend
    image: next-js
    volumes:
      - .:/workspace:cached
      - ./.next:/app/.next
      - ./public:/app/public
    environment:
      # If you still rely on a /frontend prefix in your code, keep it:
      - NEXT_PUBLIC_BASE_PATH=/frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    command: sleep infinity  # For dev usage; Next.js won't auto-run
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=(Host(`localhost`) && PathPrefix(`/frontend`))"
      # - "traefik.http.routers.frontend-api.rule=(Host(`app.localhost`) && PathPrefix(`/api/chat`))"
      # - "traefik.http.routers.frontend-api.service=frontend"
      # - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - traefik

  # frontend_dapr:
  #   container_name: frontend_dapr
  #   image: "daprio/daprd"
  #   command: ["./daprd", "-app-id", "frontend", "-app-port", "3000",
  #             "-resources-path", "/dapr", "-config", "/dapr/config.yaml",
  #             "-enable-api-logging", "-log-level", "debug",
  #             "--app-channel-address", "frontend"]
  #   volumes:
  #     - "./dapr:/dapr"
  #   depends_on:
  #     - frontend
  #     - db

  ########################################
  # 3) Next.js "tanstack"
  ########################################
  tanstack:
    container_name: tanstack
    image: next-js
    volumes:
      - ../tanstack:/workspace:cached
    environment:
      # If you do NOT need a path prefix, remove or comment out:
      - NEXT_PUBLIC_BASE_PATH=/tanstack
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    command: sleep infinity  # Again for dev usage
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tanstack.rule=(Host(`localhost`) && PathPrefix(`/tanstack`))"
      # - "traefik.http.routers.frontend.entrypoints=web"  
    depends_on:
      - traefik

  ########################################
  # 4) Example "api" Next.js (already existing)
  ########################################
  # api:
  #   container_name: api
  #   image: next-js
  #   expose:
  #     - "3000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker-host.sock
  #     - ../shadcn-table:/workspace:cached
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.api.rule=(Host(`app.localhost`) && PathPrefix(`/api`))"
  #     # - "traefik.http.routers.frontend.entrypoints=web"  
  #   depends_on:
  #     - traefik

  # api_dapr:
  #   container_name: api_dapr
  #   image: "daprio/daprd"
  #   command: ["./daprd", "--app-id", "api", "-app-port", "8080",
  #             "--resources-path", "/dapr", "--config", "/dapr/config.yaml",
  #             "--enable-api-logging", "--log-level", "debug",
  #             "--app-channel-address", "api"]
  #   volumes:
  #     - "./dapr:/dapr"
  #   depends_on:
  #     - api
  #     - db

  ########################################
  # 5) DB & Misc
  ########################################
  db:
    container_name: db
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"

  rest:
    container_name: rest
    image: postgrest/postgrest
    ports:
      - "3011:3000"
    restart: unless-stopped
    depends_on:
      - db
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRESQL_PASSWORD}@${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRESQL_DB}
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3011
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
    command:
      [
        "postgrest"
      ]

  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8081:8080"
    expose:
      - "8081"
    environment:
      API_URL: http://localhost:3011/

  # 6) Jaeger, Grafana, ClickHouse, etc.
  jaeger:
    image: ${JAEGERTRACING_IMAGE}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "${JAEGER_PORT}:${JAEGER_PORT}"
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - "traefik.enable=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=(Host(`localhost`) && PathPrefix(`/jaeger`))"
    logging: *logging

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./tracing/grafana.ini:/etc/grafana/grafana.ini
      - ./tracing/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      GF_INSTALL_PLUGINS: grafana-clickhouse-datasource,vertamedia-clickhouse-datasource
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: vertamedia-clickhouse-datasource
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=(Host(`localhost`) && PathPrefix(`/grafana`))"
    ports:
      - "3005:3000"

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: username
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: password
    volumes:
      - ./clickhouse/example/default_ddl:/docker-entrypoint-initdb.d/

  otel-collector:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./tracing/otel-collector-config.yml:/etc/otelcol-config.yml
      - ./tracing/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
      - ./logs:/logs
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
      - "13133:13133"
      - "9464"  # Prometheus exporter
      - "8889"  # metrics endpoint
    depends_on:
      jaeger:
        condition: service_started
    logging: *logging
    environment:
      - ENVOY_PORT
      - HOST_FILESYSTEM=""
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
      - TRACELOOP_API_KEY
      - AZURE_STORAGE_EXPLORER_KEY

  prometheus:
    image: quay.io/prometheus/prometheus:v2.47.2
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
    volumes:
      - prometheus_data:/usr/share/prometheus/data
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: *logging

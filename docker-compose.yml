version: "3.8"

networks:
  shared-network:
    name: shared-network

volumes:
  postgres-data:
  prometheus_data:

services:
  traefik:
    image: "traefik:v3.3"
    # no container_name set here
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entryPoints.web.address=:80"
      - "--tracing.otlp.http=true"
      - "--tracing.otlp.http.endpoint=http://otel-collector:4318/v1/traces"
      - "--experimental.otlpLogs=true"
      - "--log.otlp.http.endpoint=http://otel-collector:4318/v1/logs"
      - "--metrics.otlp.http.endpoint=http://otel-collector:4318/v1/metrics"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - shared-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  app:
    image: "traefik/whoami"
    # no container_name
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=(Host(`localhost`) && PathPrefix(`/app`))"
    networks:
      - shared-network

  frontend:
    image: "next-js"
    # no container_name
    volumes:
      - .:/workspace:cached
      - ./.next:/app/.next
      - ./public:/app/public
    environment:
      - NEXT_PUBLIC_BASE_PATH=/frontend
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    command: sleep infinity
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=(Host(`localhost`) && PathPrefix(`/frontend`))"
    networks:
      - shared-network
    depends_on:
      - traefik

  playground:
    image: "next-js"
    # no container_name
    volumes:
      - ../next-app-router-playground:/workspace:cached
    environment:
      - NEXT_PUBLIC_BASE_PATH=/playground
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    networks:
      - shared-network
    expose:
      - "3000"
    command: sleep infinity
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.playground.rule=(Host(`localhost`) && PathPrefix(`/playground`))"
    depends_on:
      - traefik

  db:
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/lib/db/migrations:/docker-entrypoint-initdb.d:ro
      - ./config/postgresql/customPostgresql.conf:/etc/postgresql.conf
      - ./logs:/logs
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    networks:
      - shared-network
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql.conf

  # Alloy: remove the `profiles` line so it always starts
  alloy:
    image: grafana/alloy:latest
    restart: on-failure
    volumes:
      - ./config/alloy:/etc/alloy
      - /var/run/docker.sock:/var/run/docker.sock
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYSLOG # Add this capability to address kptr_restrict=1 requirements
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - REMOTE_WRITE_HOST=mimir:9009
      - LOKI_HOST=loki:3100
      - TEMPO_HOST=tempo:4317
      - PYROSCOPE_HOST=pyroscope:4040
      - GRAFANA_CLOUD_INSTANCE_ID=1159337
      - GRAFANA_CLOUD_API_KEY="${GRAFANA_CLOUD_API_KEY}"
      - GRAFANA_CLOUD_OTLP_ENDPOINT=https://otlp-gateway-prod-us-east-2.grafana.net/otlp
    depends_on:
      - mimir
      - loki
      - tempo
      - pyroscope
    command:
      - run
      - /etc/alloy/config.alloy
      - --storage.path=/var/lib/alloy/data
      - --server.http.listen-addr=0.0.0.0:12345
      - --stability.level=experimental
    networks:
      - shared-network
    ports:
      - "12345:12345"
      - "4317:4317"
      - "4318:4318"

  pyroscope:
    image: grafana/pyroscope:latest
    # no container_name
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    command: [ "-config.file=/etc/pyroscope.yml" ]
    volumes:
      - ./config/pyroscope/pyroscope.yml:/etc/pyroscope.yml
    networks:
      - shared-network
    ports:
      - "4040:4040"

  init:
    image: grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
    networks:
      - shared-network

  tempo:
    image: grafana/tempo:latest
    # no container_name
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/shared/tempo.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/var/tempo
    depends_on:
      - init
    networks:
      - shared-network
    ports:
      - "3200:3200"
      - "4317"

  beyla-frontend:
    image: grafana/beyla:latest
    pid: "service:frontend"
    privileged: true
    network_mode: host
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup  # Required for context propagation
    cap_add:
      - BPF                # Required for eBPF probes
      - SYS_PTRACE         # Allows inspecting executables
      - NET_RAW            # For socket filters
      - CHECKPOINT_RESTORE # For opening ELF files
      - DAC_READ_SEARCH    # For opening ELF files
      - PERFMON            # For loading BPF programs
      - NET_ADMIN          # Required for context propagation
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - BEYLA_SERVICE_NAME=frontend
      - BEYLA_OPEN_PORT=3000
      - BEYLA_TRACE_PRINTER=text
      - BEYLA_NETWORK_METRICS=true
      - BEYLA_NETWORK_SOURCE=socket_filter
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
      - OTEL_EXPORTER_OTLP_HEADERS=""
      - BEYLA_BPF_ENABLE_CONTEXT_PROPAGATION=true
    depends_on:
      frontend:
        condition: service_started

  beyla-playground:
    image: grafana/beyla:latest
    pid: "service:playground"
    privileged: true
    network_mode: host
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup  # Required for context propagation
    cap_add:
      - BPF                # Required for eBPF probes
      - SYS_PTRACE         # Allows inspecting executables
      - NET_RAW            # For socket filters
      - CHECKPOINT_RESTORE # For opening ELF files
      - DAC_READ_SEARCH    # For opening ELF files
      - PERFMON            # For loading BPF programs
      - NET_ADMIN          # Required for context propagation
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - BEYLA_SERVICE_NAME=playground
      - BEYLA_OPEN_PORT=3000
      - BEYLA_TRACE_PRINTER=text
      - BEYLA_NETWORK_METRICS=true
      - BEYLA_NETWORK_SOURCE=socket_filter
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
      - OTEL_EXPORTER_OTLP_HEADERS=""
      - BEYLA_BPF_ENABLE_CONTEXT_PROPAGATION=true
    depends_on:
      frontend:
        condition: service_started

  beyla-db:
    image: grafana/beyla:latest
    pid: "service:db"
    privileged: true
    network_mode: host
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup  # Required for context propagation
    cap_add:
      - BPF                # Required for eBPF probes
      - SYS_PTRACE         # Allows inspecting executables
      - NET_RAW            # For socket filters
      - CHECKPOINT_RESTORE # For opening ELF files
      - DAC_READ_SEARCH    # For opening ELF files
      - PERFMON            # For loading BPF programs
      - NET_ADMIN          # Required for context propagation
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - BEYLA_SERVICE_NAME=db
      - BEYLA_OPEN_PORT=5432
      - BEYLA_TRACE_PRINTER=text
      - BEYLA_NETWORK_METRICS=true
      - BEYLA_NETWORK_SOURCE=socket_filter
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
      - OTEL_EXPORTER_OTLP_HEADERS=""
      - BEYLA_BPF_ENABLE_CONTEXT_PROPAGATION=true
    depends_on:
      frontend:
        condition: service_started

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./config/shared/prometheus.yaml:/etc/prometheus.yaml
    networks:
      - shared-network
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/:ro
    env_file:
      - .env
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceToProfiles tracesEmbeddedFlameGraph
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app
      - GF_INSTALL_PLUGINS=grafana-metricsdrilldown-app
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-exploretraces-app/grafana-exploretraces-app-latest.zip;grafana-traces-app
    networks:
      - shared-network
    ports:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=(Host(`localhost`) && PathPrefix(`/grafana`))"
    depends_on:
      - mimir
      - loki
      - tempo

  mimir:
    image: grafana/mimir:latest
    volumes:
      - ./config/mimir/mimir.yaml:/etc/mimir.yaml
    command:
      - --config.file=/etc/mimir.yaml
      - -distributor.otel-metric-suffixes-enabled
    networks:
      - shared-network
    ports:
      - "9009:9009"

  loki:
    image: grafana/loki:latest
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -log.level=debug
      - -pattern-ingester.enabled=true
    volumes:
      - ./config/loki/:/etc/loki/:ro
    networks:
      - shared-network
    ports:
      - "3100:3100"
